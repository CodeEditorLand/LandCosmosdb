{
	"activationEvents": [
		"onFileSystem:azureDatabases",
		"onView:azureWorkspace"
	],
	"aiKey": "0c6ae279ed8443289764825290e4f9e2-1a736e7c-1324-4338-be46-fc2a58ae4d14-7255",
	"contributes": {
		"commands": [
			{
				"category": "Azure Databases",
				"command": "azureDatabases.createServer",
				"icon": "$(add)",
				"title": "Create Server..."
			},
			{
				"category": "Cosmos DB",
				"command": "azureDatabases.detachDatabaseAccount",
				"title": "Detach"
			},
			{
				"category": "Azure Databases",
				"command": "azureDatabases.loadMore",
				"title": "Load More"
			},
			{
				"category": "Azure Databases",
				"command": "azureDatabases.refresh",
				"icon": "$(refresh)",
				"title": "Refresh"
			},
			{
				"category": "Azure Databases",
				"command": "azureDatabases.reportIssue",
				"title": "Report Issue..."
			},
			{
				"category": "Azure Databases",
				"command": "azureDatabases.update",
				"icon": "$(cloud-upload)",
				"title": "Update to Cloud"
			},
			{
				"category": "Cosmos DB",
				"command": "cosmosDB.attachDatabaseAccount",
				"icon": "$(plug)",
				"title": "Attach Database Account..."
			},
			{
				"category": "Cosmos DB",
				"command": "cosmosDB.attachEmulator",
				"title": "Attach Emulator..."
			},
			{
				"category": "MongoDB",
				"command": "cosmosDB.connectMongoDB",
				"title": "Connect to Database..."
			},
			{
				"category": "Cosmos DB",
				"command": "cosmosDB.connectNoSqlContainer",
				"title": "Connect to NoSQL container",
				"when": "false"
			},
			{
				"category": "Cosmos DB",
				"command": "cosmosDB.copyConnectionString",
				"title": "Copy Connection String"
			},
			{
				"category": "Core (SQL)",
				"command": "cosmosDB.createDocDBCollection",
				"title": "Create Collection..."
			},
			{
				"category": "Core (SQL)",
				"command": "cosmosDB.createDocDBDatabase",
				"title": "Create Database..."
			},
			{
				"category": "Core (SQL)",
				"command": "cosmosDB.createDocDBDocument",
				"title": "Create Document..."
			},
			{
				"category": "Core (SQL)",
				"command": "cosmosDB.createDocDBStoredProcedure",
				"title": "Create Stored Procedure..."
			},
			{
				"category": "Core (SQL)",
				"command": "cosmosDB.createDocDBTrigger",
				"title": "Create Trigger..."
			},
			{
				"category": "Graph (Gremlin)",
				"command": "cosmosDB.createGraph",
				"title": "Create Graph..."
			},
			{
				"category": "Graph (Gremlin)",
				"command": "cosmosDB.createGraphDatabase",
				"title": "Create Database..."
			},
			{
				"category": "MongoDB",
				"command": "cosmosDB.createMongoCollection",
				"title": "Create Collection..."
			},
			{
				"category": "MongoDB",
				"command": "cosmosDB.createMongoDatabase",
				"title": "Create Database..."
			},
			{
				"category": "MongoDB",
				"command": "cosmosDB.createMongoDocument",
				"title": "Create Document"
			},
			{
				"category": "Cosmos DB",
				"command": "cosmosDB.deleteAccount",
				"title": "Delete Account..."
			},
			{
				"category": "Core (SQL)",
				"command": "cosmosDB.deleteDocDBCollection",
				"title": "Delete Collection..."
			},
			{
				"category": "Core (SQL)",
				"command": "cosmosDB.deleteDocDBDatabase",
				"title": "Delete Database..."
			},
			{
				"category": "Core (SQL)",
				"command": "cosmosDB.deleteDocDBDocument",
				"title": "Delete Document..."
			},
			{
				"category": "Core (SQL)",
				"command": "cosmosDB.deleteDocDBStoredProcedure",
				"title": "Delete Stored Procedure..."
			},
			{
				"category": "Core (SQL)",
				"command": "cosmosDB.deleteDocDBTrigger",
				"title": "Delete Trigger..."
			},
			{
				"category": "Graph (Gremlin)",
				"command": "cosmosDB.deleteGraph",
				"title": "Delete Graph..."
			},
			{
				"category": "Graph (Gremlin)",
				"command": "cosmosDB.deleteGraphDatabase",
				"title": "Delete Database..."
			},
			{
				"category": "MongoDB",
				"command": "cosmosDB.deleteMongoCollection",
				"title": "Delete Collection..."
			},
			{
				"category": "MongoDB",
				"command": "cosmosDB.deleteMongoDB",
				"title": "Delete Database..."
			},
			{
				"category": "MongoDB",
				"command": "cosmosDB.deleteMongoDocument",
				"title": "Delete Document..."
			},
			{
				"category": "MongoDB",
				"command": "cosmosDB.executeAllMongoCommands",
				"title": "Execute All MongoDB Commands"
			},
			{
				"category": "Core (SQL)",
				"command": "cosmosDB.executeDocDBStoredProcedure",
				"title": "Execute Stored Procedure..."
			},
			{
				"category": "MongoDB",
				"command": "cosmosDB.executeMongoCommand",
				"title": "Execute MongoDB Command"
			},
			{
				"category": "Cosmos DB",
				"command": "cosmosDB.executeNoSqlQuery",
				"title": "Execute NoSQL Query",
				"when": "false"
			},
			{
				"category": "Cosmos DB",
				"command": "cosmosDB.getNoSqlQueryPlan",
				"title": "Get NoSQL Query Plan",
				"when": "false"
			},
			{
				"category": "Cosmos DB",
				"command": "cosmosDB.importDocument",
				"title": "Import Document into a Collection..."
			},
			{
				"category": "MongoDB",
				"command": "cosmosDB.launchMongoShell",
				"title": "Launch Shell"
			},
			{
				"category": "MongoDB",
				"command": "cosmosDB.newMongoScrapbook",
				"icon": "$(new-file)",
				"title": "New Mongo Scrapbook"
			},
			{
				"category": "MongoDB",
				"command": "cosmosDB.openCollection",
				"title": "Open Collection"
			},
			{
				"category": "Cosmos DB",
				"command": "cosmosDB.openDocument",
				"title": "Open Document"
			},
			{
				"category": "Graph (Gremlin)",
				"command": "cosmosDB.openGraphExplorer",
				"title": "Open Graph Explorer"
			},
			{
				"category": "Cosmos DB",
				"command": "cosmosDB.openStoredProcedure",
				"title": "Open Stored Procedure"
			},
			{
				"category": "Cosmos DB",
				"command": "cosmosDB.openTrigger",
				"title": "Open Trigger"
			},
			{
				"category": "Core (SQL)",
				"command": "cosmosDB.viewDocDBCollectionOffer",
				"title": "View Collection Offer"
			},
			{
				"category": "Core (SQL)",
				"command": "cosmosDB.writeNoSqlQuery",
				"title": "Create New NoSQL Query"
			},
			{
				"category": "PostgreSQL",
				"command": "postgreSQL.configureFirewall",
				"title": "Configure Firewall"
			},
			{
				"category": "PostgreSQL",
				"command": "postgreSQL.connectDatabase",
				"title": "Connect to Database..."
			},
			{
				"category": "PostgreSQL",
				"command": "postgreSQL.copyConnectionString",
				"title": "Copy Connection String"
			},
			{
				"category": "PostgreSQL",
				"command": "postgreSQL.createDatabase",
				"title": "Create Database..."
			},
			{
				"category": "PostgreSQL",
				"command": "postgreSQL.createFunctionQuery",
				"title": "Create Function Query..."
			},
			{
				"category": "PostgreSQL",
				"command": "postgreSQL.createStoredProcedureQuery",
				"title": "Create Stored Procedure Query..."
			},
			{
				"category": "PostgreSQL",
				"command": "postgreSQL.deleteDatabase",
				"title": "Delete Database..."
			},
			{
				"category": "PostgreSQL",
				"command": "postgreSQL.deleteFunction",
				"title": "Delete Function..."
			},
			{
				"category": "PostgreSQL",
				"command": "postgreSQL.deleteServer",
				"title": "Delete Server..."
			},
			{
				"category": "PostgreSQL",
				"command": "postgreSQL.deleteStoredProcedure",
				"title": "Delete Stored Procedure..."
			},
			{
				"category": "PostgreSQL",
				"command": "postgreSQL.deleteTable",
				"title": "Delete Table..."
			},
			{
				"category": "PostgreSQL",
				"command": "postgreSQL.enterCredentials",
				"title": "Enter Server Credentials"
			},
			{
				"category": "PostgreSQL",
				"command": "postgreSQL.executeQuery",
				"title": "Execute Query..."
			},
			{
				"category": "PostgreSQL",
				"command": "postgreSQL.openFunction",
				"title": "Open Function"
			},
			{
				"category": "PostgreSQL",
				"command": "postgreSQL.openStoredProcedure",
				"title": "Open Stored Procedure"
			},
			{
				"category": "PostgreSQL",
				"command": "postgreSQL.showPasswordlessWiki",
				"icon": "$(warning)",
				"title": "Learn more about authenticating with Azure Active Directory"
			}
		],
		"configuration": {
			"properties": {
				"azureDatabases.batchSize": {
					"default": 50,
					"description": "The batch size to be used when querying Azure Database resources.",
					"type": "number"
				},
				"azureDatabases.showExplorer": {
					"default": true,
					"description": "Show or hide the Azure Databases Explorer",
					"type": "boolean"
				},
				"azureDatabases.useCosmosOAuth": {
					"default": false,
					"description": "Whether to use OAuth credential for Cosmos DB NoSQL resources",
					"type": "boolean"
				},
				"cosmosDB.documentLabelFields": {
					"default": [
						"name",
						"Name",
						"NAME",
						"ID",
						"UUID",
						"Id",
						"id",
						"_id",
						"uuid"
					],
					"description": "The field values to display as labels in the treeview for Cosmos DB and MongoDB documents, in priority order",
					"type": "array"
				},
				"cosmosDB.emulator.mongoPort": {
					"default": 10255,
					"description": "Port to use when connecting to a CosmosDB Mongo Emulator instance",
					"type": "integer"
				},
				"cosmosDB.emulator.port": {
					"default": 8081,
					"description": "Port to use when connecting to a CosmosDB Emulator instance",
					"type": "integer"
				},
				"cosmosDB.enableEndpointDiscovery": {
					"default": true,
					"description": "Flag to enable/disable automatic redirecting of requests based on read/write operations.",
					"type": "boolean"
				},
				"cosmosDB.showSavePrompt": {
					"default": true,
					"description": "Show warning dialog when uploading a document to the cloud.",
					"type": "boolean"
				},
				"mongo.shell.args": {
					"default": [
						"--quiet"
					],
					"description": "Arguments to pass when starting the Mongo shell.",
					"items": {
						"type": "string"
					},
					"type": "array"
				},
				"mongo.shell.path": {
					"default": null,
					"description": "Full path to folder and executable to start the Mongo shell, needed by some Mongo scrapbook commands. The default is to search in the system path for 'mongo'.",
					"type": [
						"string",
						"null"
					]
				},
				"mongo.shell.timeout": {
					"default": 30,
					"description": "The duration allowed (in seconds) for the Mongo shell to execute a command. Default value is 30 seconds.",
					"type": "number"
				}
			},
			"title": "Azure Databases"
		},
		"grammars": [
			{
				"language": "mongo",
				"path": "./grammar/JavaScript.tmLanguage.json",
				"scopeName": "source.mongo.js"
			},
			{
				"path": "./grammar/Regular Expressions (JavaScript).tmLanguage",
				"scopeName": "source.mongo.js.regexp"
			}
		],
		"keybindings": [
			{
				"command": "cosmosDB.executeMongoCommand",
				"key": "ctrl+shift+'",
				"mac": "cmd+shift+'",
				"when": "editorLangId == 'mongo' && editorTextFocus"
			},
			{
				"command": "cosmosDB.executeAllMongoCommands",
				"key": "ctrl+shift+;",
				"mac": "cmd+shift+;",
				"when": "editorLangId == 'mongo' && editorTextFocus"
			}
		],
		"languages": [
			{
				"aliases": [
					"Mongo Scrapbook",
					"mongo"
				],
				"configuration": "./grammar/configuration.json",
				"extensions": [
					".mongo"
				],
				"firstLine": "^#!/.*\\bmongo*\\b",
				"id": "mongo"
			},
			{
				"aliases": [
					"PostgreSQL"
				],
				"extensions": [
					".psql"
				],
				"id": "postgres"
			},
			{
				"aliases": [
					"Cosmos NoSQL",
					"nosql"
				],
				"extensions": [
					".nosql"
				],
				"id": "nosql"
			}
		],
		"menus": {
			"azureDatabases.submenus.workspaceActions": [
				{
					"command": "cosmosDB.attachDatabaseAccount",
					"group": "1_attach@1"
				}
			],
			"commandPalette": [
				{
					"command": "azureDatabases.loadMore",
					"when": "never"
				},
				{
					"command": "azureDatabases.refresh",
					"when": "never"
				},
				{
					"command": "azureDatabases.update",
					"when": "never"
				},
				{
					"command": "cosmosDB.executeAllMongoCommands",
					"when": "editorLangId == 'mongo'"
				},
				{
					"command": "cosmosDB.executeMongoCommand",
					"when": "editorLangId == 'mongo'"
				},
				{
					"command": "cosmosDB.executeNoSqlQuery",
					"when": "editorLangId == 'nosql'"
				},
				{
					"command": "cosmosDB.getNoSqlQueryPlan",
					"when": "editorLangId == 'nosql'"
				},
				{
					"command": "postgreSQL.executeQuery",
					"when": "editorLangId == 'postgres'"
				}
			],
			"editor/context": [
				{
					"command": "azureDatabases.update",
					"when": "resourceFilename==cosmos-result.json"
				},
				{
					"command": "azureDatabases.update",
					"when": "resourceFilename=~/(.*cosmos-document[.]json)/"
				},
				{
					"command": "azureDatabases.update",
					"when": "resourceFilename=~/(.*cosmos-collection[.]json)/"
				},
				{
					"command": "azureDatabases.update",
					"when": "resourceFilename=~/(.*cosmos-stored-procedure[.]js)/"
				},
				{
					"command": "cosmosDB.executeAllMongoCommands",
					"when": "resourceLangId==mongo"
				},
				{
					"command": "cosmosDB.executeMongoCommand",
					"when": "resourceLangId==mongo"
				},
				{
					"command": "cosmosDB.importDocument",
					"when": "resourceLangId==json"
				},
				{
					"command": "postgreSQL.connectDatabase",
					"when": "resourceLangId==postgres"
				}
			],
			"editor/title": [
				{
					"command": "azureDatabases.update",
					"group": "navigation",
					"when": "resourceFilename==cosmos-result.json"
				},
				{
					"command": "azureDatabases.update",
					"group": "navigation",
					"when": "resourceFilename=~/(.*cosmos-document[.]json)(?![a-z])/i"
				},
				{
					"command": "azureDatabases.update",
					"group": "navigation",
					"when": "resourceFilename=~/(.*cosmos-collection[.]json)(?![a-z])/i"
				},
				{
					"command": "azureDatabases.update",
					"group": "navigation",
					"when": "resourceFilename=~/(.*cosmos-stored-procedure[.]js)(?![a-z])/i"
				}
			],
			"explorer/context": [
				{
					"command": "cosmosDB.importDocument",
					"when": "resourceLangId == json"
				},
				{
					"command": "postgreSQL.connectDatabase",
					"when": "resourceLangId == postgres"
				}
			],
			"view/item/context": [
				{
					"command": "azureDatabases.createServer",
					"group": "1@1",
					"when": "view == azureResourceGroups && viewItem =~ /(AzureCosmosDb|PostgreSqlServers(Standard|Flexible))/i && viewItem =~ /azureResourceTypeGroup/i"
				},
				{
					"command": "cosmosDB.deleteAccount",
					"group": "1@2",
					"when": "view =~ /(azureResourceGroups|azureFocusView)/ && viewItem =~ /cosmosDBMongoServer(?![a-z])/i"
				},
				{
					"command": "cosmosDB.deleteAccount",
					"group": "1@2",
					"when": "view =~ /(azureResourceGroups|azureFocusView)/ && viewItem =~ /cosmosDBDocumentServer(?![a-z])/i"
				},
				{
					"command": "cosmosDB.deleteAccount",
					"group": "1@2",
					"when": "view =~ /(azureResourceGroups|azureFocusView)/ && viewItem =~ /cosmosDBGraphAccount(?![a-z])/i"
				},
				{
					"command": "cosmosDB.deleteAccount",
					"group": "1@2",
					"when": "view =~ /(azureResourceGroups|azureFocusView)/ && viewItem =~ /cosmosDBTableAccount(?![a-z])/i"
				},
				{
					"command": "postgreSQL.deleteServer",
					"group": "1@2",
					"when": "view =~ /(azureResourceGroups|azureFocusView)/ && viewItem =~ /postgresServer(?![a-z])/i"
				},
				{
					"command": "cosmosDB.createMongoDatabase",
					"group": "1@1",
					"when": "view == azureWorkspace && viewItem == cosmosDBMongoServerAttached"
				},
				{
					"command": "cosmosDB.createMongoDatabase",
					"group": "1@1",
					"when": "view =~ /(azureResourceGroups|azureFocusView)/ && viewItem =~ /cosmosDBMongoServer(?![a-z])/i"
				},
				{
					"command": "cosmosDB.createMongoDocument",
					"group": "1@1",
					"when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == MongoCollection"
				},
				{
					"command": "cosmosDB.createMongoCollection",
					"group": "1@1",
					"when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == mongoDb"
				},
				{
					"command": "cosmosDB.createDocDBDocument",
					"group": "1@1",
					"when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == cosmosDBDocumentsGroup"
				},
				{
					"command": "cosmosDB.writeNoSqlQuery",
					"group": "1@2",
					"when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == cosmosDBDocumentCollection"
				},
				{
					"command": "cosmosDB.createDocDBStoredProcedure",
					"group": "1@1",
					"when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == cosmosDBStoredProceduresGroup"
				},
				{
					"command": "cosmosDB.createDocDBTrigger",
					"group": "1@1",
					"when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == cosmosDBTriggersGroup"
				},
				{
					"command": "cosmosDB.createDocDBCollection",
					"group": "1@1",
					"when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == cosmosDBDocumentDatabase"
				},
				{
					"command": "cosmosDB.createDocDBDatabase",
					"group": "1@1",
					"when": "view =~ /(azureResourceGroups|azureFocusView)/ && viewItem =~ /cosmosDBDocumentServer(?![a-z])/i"
				},
				{
					"command": "cosmosDB.createDocDBDatabase",
					"group": "1@1",
					"when": "view == azureWorkspace && viewItem == cosmosDBDocumentServerAttached"
				},
				{
					"command": "cosmosDB.createGraphDatabase",
					"group": "1@1",
					"when": "view =~ /(azureResourceGroups|azureFocusView)/ && viewItem =~ /cosmosDBGraphAccount(?![a-z])/i"
				},
				{
					"command": "cosmosDB.createGraphDatabase",
					"group": "1@1",
					"when": "view == azureWorkspace && viewItem == cosmosDBGraphAccountAttached"
				},
				{
					"command": "cosmosDB.createGraph",
					"group": "1@1",
					"when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == cosmosDBGraphDatabase"
				},
				{
					"command": "postgreSQL.showPasswordlessWiki",
					"group": "inline",
					"when": "view =~ /azure(ResourceGroups|azureFocusView)/ && viewItem =~ /postgresDatabase(?![a-z])/i && viewItem =~ /usesPassword/i"
				},
				{
					"command": "postgreSQL.createDatabase",
					"group": "1@1",
					"when": "view =~ /(azureResourceGroups|azureFocusView)/ && viewItem =~ /postgresServer(?![a-z])/i"
				},
				{
					"command": "postgreSQL.createDatabase",
					"group": "1@1",
					"when": "view == azureWorkspace && viewItem == postgresServerAttached"
				},
				{
					"command": "azureDatabases.detachDatabaseAccount",
					"group": "1@2",
					"when": "view == azureWorkspace && viewItem == cosmosDBMongoServerAttached"
				},
				{
					"command": "azureDatabases.detachDatabaseAccount",
					"group": "1@2",
					"when": "view == azureWorkspace && viewItem == cosmosDBGraphAccountAttached"
				},
				{
					"command": "azureDatabases.detachDatabaseAccount",
					"group": "1@2",
					"when": "view == azureWorkspace && viewItem == cosmosDBDocumentServerAttached"
				},
				{
					"command": "azureDatabases.detachDatabaseAccount",
					"group": "1@2",
					"when": "view == azureWorkspace && viewItem == cosmosDBTableAccountAttached"
				},
				{
					"command": "azureDatabases.detachDatabaseAccount",
					"group": "1@2",
					"when": "view == azureWorkspace && viewItem == postgresServerAttached"
				},
				{
					"command": "cosmosDB.connectMongoDB",
					"group": "2@1",
					"when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == mongoDb"
				},
				{
					"command": "cosmosDB.deleteMongoDB",
					"group": "1@2",
					"when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == mongoDb"
				},
				{
					"command": "cosmosDB.deleteMongoCollection",
					"group": "1@4",
					"when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == MongoCollection"
				},
				{
					"command": "cosmosDB.deleteMongoDocument",
					"group": "1@2",
					"when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == MongoDocument"
				},
				{
					"command": "cosmosDB.deleteDocDBCollection",
					"group": "1@2",
					"when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == cosmosDBDocumentCollection"
				},
				{
					"command": "cosmosDB.viewDocDBCollectionOffer",
					"group": "1@3",
					"when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == cosmosDBDocumentCollection"
				},
				{
					"command": "cosmosDB.deleteDocDBDocument",
					"group": "1@2",
					"when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == cosmosDBDocument"
				},
				{
					"command": "cosmosDB.deleteDocDBStoredProcedure",
					"group": "1@2",
					"when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == cosmosDBStoredProcedure"
				},
				{
					"command": "cosmosDB.executeDocDBStoredProcedure",
					"group": "1@1",
					"when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == cosmosDBStoredProcedure"
				},
				{
					"command": "cosmosDB.deleteDocDBTrigger",
					"group": "1@2",
					"when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == cosmosDBTrigger"
				},
				{
					"command": "cosmosDB.deleteDocDBDatabase",
					"group": "1@2",
					"when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == cosmosDBDocumentDatabase"
				},
				{
					"command": "cosmosDB.deleteGraphDatabase",
					"group": "1@2",
					"when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == cosmosDBGraphDatabase"
				},
				{
					"command": "postgreSQL.deleteDatabase",
					"group": "1@2",
					"when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem =~ /postgresDatabase(?![a-z])/i"
				},
				{
					"command": "postgreSQL.deleteTable",
					"group": "1@2",
					"when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == postgresTable"
				},
				{
					"command": "postgreSQL.deleteFunction",
					"group": "1@2",
					"when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == postgresFunction"
				},
				{
					"command": "postgreSQL.deleteStoredProcedure",
					"group": "1@2",
					"when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == postgresStoredProcedure"
				},
				{
					"command": "cosmosDB.deleteGraph",
					"group": "1@2",
					"when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == cosmosDBGraph"
				},
				{
					"command": "cosmosDB.attachDatabaseAccount",
					"group": "1@1",
					"when": "view == azureWorkspace && viewItem =~ /cosmosDBAttachedAccounts(?![a-z])/gi"
				},
				{
					"command": "cosmosDB.attachEmulator",
					"group": "1@2",
					"when": "view == azureWorkspace && viewItem == cosmosDBAttachedAccountsWithEmulator"
				},
				{
					"command": "cosmosDB.openCollection",
					"group": "1@2",
					"when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == MongoCollection"
				},
				{
					"command": "cosmosDB.copyConnectionString",
					"group": "2@1",
					"when": "view =~ /(azureResourceGroups|azureFocusView)/ && viewItem =~ /cosmosDBMongoServer(?![a-z])/i"
				},
				{
					"command": "cosmosDB.copyConnectionString",
					"group": "2@1",
					"when": "view =~ /(azureResourceGroups|azureFocusView)/ && viewItem =~ /cosmosDBGraphAccount(?![a-z])/i"
				},
				{
					"command": "cosmosDB.copyConnectionString",
					"group": "2@1",
					"when": "view =~ /(azureResourceGroups|azureFocusView)/ && viewItem =~ /cosmosDBDocumentServer(?![a-z])/i"
				},
				{
					"command": "cosmosDB.copyConnectionString",
					"group": "2@1",
					"when": "view =~ /(azureResourceGroups|azureFocusView)/ && viewItem =~ /cosmosDBTableAccount(?![a-z])/i"
				},
				{
					"command": "cosmosDB.copyConnectionString",
					"group": "2@1",
					"when": "view == azureWorkspace && viewItem == cosmosDBMongoServerAttached"
				},
				{
					"command": "cosmosDB.copyConnectionString",
					"group": "2@1",
					"when": "view == azureWorkspace && viewItem == cosmosDBGraphAccountAttached"
				},
				{
					"command": "cosmosDB.copyConnectionString",
					"group": "2@1",
					"when": "view == azureWorkspace && viewItem == cosmosDBDocumentServerAttached"
				},
				{
					"command": "cosmosDB.copyConnectionString",
					"group": "2@1",
					"when": "view == azureWorkspace && viewItem == cosmosDBTableAccountAttached"
				},
				{
					"command": "postgreSQL.copyConnectionString",
					"group": "2@1",
					"when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem =~ /postgresDatabase(?![a-z])/i"
				},
				{
					"command": "azureDatabases.refresh",
					"group": "3@2",
					"when": "view == azureWorkspace && viewItem == cosmosDBMongoServerAttached"
				},
				{
					"command": "azureDatabases.refresh",
					"group": "2@1",
					"when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == cosmosDBDocumentCollection"
				},
				{
					"command": "azureDatabases.refresh",
					"group": "4@1",
					"when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == cosmosDBDocumentDatabase"
				},
				{
					"command": "azureDatabases.refresh",
					"group": "2@1",
					"when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == cosmosDBDocumentsGroup"
				},
				{
					"command": "azureDatabases.refresh",
					"group": "2@1",
					"when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == cosmosDBStoredProceduresGroup"
				},
				{
					"command": "azureDatabases.refresh",
					"group": "2@1",
					"when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == cosmosDBTriggersGroup"
				},
				{
					"command": "azureDatabases.refresh",
					"group": "3@2",
					"when": "view =~ /azureWorkspace/ && viewItem =~ /cosmosDBDocumentServer(?![a-z])/i"
				},
				{
					"command": "azureDatabases.refresh",
					"group": "2@2",
					"when": "view =~ /azureWorkspace/ && viewItem =~ /postgresServer(?![a-z])/i"
				},
				{
					"command": "azureDatabases.refresh",
					"group": "3@1",
					"when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem =~ /postgresDatabase(?![a-z])/i"
				},
				{
					"command": "azureDatabases.refresh",
					"group": "1@1",
					"when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == postgresTables"
				},
				{
					"command": "azureDatabases.refresh",
					"group": "2@1",
					"when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == postgresFunctions"
				},
				{
					"command": "azureDatabases.refresh",
					"group": "2@1",
					"when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == postgresStoredProcedures"
				},
				{
					"command": "azureDatabases.refresh",
					"group": "3@1",
					"when": "view == azureWorkspace && viewItem == cosmosDBDocumentServerAttached"
				},
				{
					"command": "azureDatabases.refresh",
					"group": "3@2",
					"when": "view =~ /azureWorkspace/ && viewItem =~ /cosmosDBGraphAccount(?![a-z])/i"
				},
				{
					"command": "azureDatabases.refresh",
					"group": "3@1",
					"when": "view == azureWorkspace && viewItem == cosmosDBGraphAccountAttached"
				},
				{
					"command": "azureDatabases.refresh",
					"group": "2@1",
					"when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == cosmosDBGraphDatabase"
				},
				{
					"command": "azureDatabases.refresh",
					"group": "2@1",
					"when": "view == azureWorkspace && viewItem == postgresServerAttached"
				},
				{
					"command": "azureDatabases.refresh",
					"group": "3@1",
					"when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == mongoDb"
				},
				{
					"command": "azureDatabases.refresh",
					"group": "4@1",
					"when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == MongoCollection"
				},
				{
					"command": "azureDatabases.refresh",
					"group": "2@1",
					"when": "view == azureWorkspace && viewItem =~ /^cosmosDBAttachedAccounts(?![a-z])/gi"
				},
				{
					"command": "cosmosDB.importDocument",
					"group": "1@3",
					"when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == MongoCollection"
				},
				{
					"command": "cosmosDB.importDocument",
					"group": "1@1",
					"when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == cosmosDBDocumentCollection"
				},
				{
					"command": "postgreSQL.connectDatabase",
					"group": "1@1",
					"when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem =~ /postgresDatabase(?![a-z])/i"
				},
				{
					"command": "postgreSQL.createFunctionQuery",
					"group": "1@1",
					"when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == postgresFunctions"
				},
				{
					"command": "postgreSQL.createStoredProcedureQuery",
					"group": "1@1",
					"when": "view =~ /azure(ResourceGroups|Workspace|FocusView)/ && viewItem == postgresStoredProcedures"
				}
			],
			"view/title": [
				{
					"group": "navigation@6",
					"submenu": "azureDatabases.submenus.workspaceActions",
					"when": "view == azureWorkspace"
				}
			]
		},
		"submenus": [
			{
				"icon": {
					"dark": "resources/databases.png",
					"light": "resources/databases.png"
				},
				"id": "azureDatabases.submenus.workspaceActions",
				"label": "Azure Databases"
			}
		],
		"x-azResources": {
			"activation": {
				"onResolve": [
					"microsoft.documentdb/databaseaccounts",
					"microsoft.dbforpostgresql/servers",
					"microsoft.dbforpostgresql/flexibleservers"
				]
			},
			"azure": {
				"branches": [
					{
						"type": "AzureCosmosDb"
					},
					{
						"type": "PostgresqlServersStandard"
					},
					{
						"type": "PostgresqlServersFlexible"
					}
				]
			},
			"commands": [
				{
					"command": "azureDatabases.createServer",
					"detail": "SQL or NoSQL databases for your web apps.",
					"title": "Create Database Server...",
					"type": "microsoft.documentdb/databaseaccounts"
				}
			],
			"workspace": {
				"branches": [
					{
						"type": "ms-azuretools.vscode-cosmosdb"
					}
				],
				"resources": true
			}
		}
	},
	"dependencies": {
		"antlr4ts": "^0.4.1-alpha.0",
		"bson": "^6.0.0",
		"fs-extra": "^8.0.0",
		"mongodb": "^6.0.0",
		"open": "^8.0.0",
		"pg": "^8.11.2",
		"pg-connection-string": "^2.6.2",
		"pg-structure": "^7.15.0",
		"semver": "^7.5.2",
		"underscore": "^1.12.1"
	},
	"description": "Create, browse, and update globally distributed, multi-model databases in Azure.",
	"devDependencies": {
		"@types/documentdb": "^1.10.2",
		"@types/fs-extra": "^8.1.0",
		"@types/node": "^14.0.0",
		"@types/pg": "^8.10.2",
		"antlr4ts-cli": "^0.4.0-alpha.4",
		"glob": "^7.1.6",
		"prettier-plugin-organize-imports": "^4.0.0"
	},
	"displayName": "Azure Databases",
	"extensionDependencies": [
		"ms-azuretools.vscode-azureresourcegroups"
	],
	"galleryBanner": {
		"color": "#3c3c3c",
		"theme": "dark"
	},
	"icon": "resources/databases.png",
	"main": "./main",
	"name": "vscode-cosmosdb",
	"overrides": {
		"es5-ext": "0.10.53"
	},
	"preview": true,
	"scripts": {
		"all": "npm i && npm run lint && npm test",
		"build": "tsc",
		"clean": "git clean -dfx",
		"cleanReadme": "gulp cleanReadme",
		"compile": "tsc -watch",
		"package-local": "vsce package",
		"prepare": "husky install",
		"unittest": "mocha ./out/test/unit/**/*.js",
		"update-grammar": "antlr4ts -visitor ./grammar/mongo.g4 -o ./src/mongo/grammar",
		"webpack": "npm run build && gulp webpack-dev",
		"webpack-prod": "npm run build && gulp webpack-prod",
		"webpack-profile": "webpack --profile --json --mode production > webpack-stats.json && echo Use http://webpack.github.io/analyse to analyze the stats"
	}
}
